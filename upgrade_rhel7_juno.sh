# Turn me into a RHEL 7 node with Juno.
# Yossi keeps messing up so, time to automate this whole thing.
# Joey <jmcdice@gmail.com>


function reset_ceph() {

   # Wipe out ceph
   echo -n "Wiping out Ceph: "
   echo YES | sh /export/apps/ceph/resetceph.sh &> /dev/null
   echo "Ok"
}

function backup_repo() {
   
   echo -n "Backing up RHEL 6 repo: "
   # Create a backup of the RHEL 6.5 ISO
   dir -1 /export/rolls/ &> /dev/null || mkdir /export/rolls/ 
   cd /export/rolls/
   if [ -e RHEL-6.5-0.x86_64.disk1.iso ]
   then
     echo "Ok"
   else 
      rocks create mirror http://10.1.1.1/install/rolls/RHEL/6.5/redhat/x86_64/RPMS/ rollname=RHEL version=6.5 &> /dev/null
      echo "Ok"
   fi
}

function get_rhel7() {

   echo -n "Checking RHEL 7 roll: "
   # Aquire the RHEL 7 roll.
   if [ -e /export/rolls/rhel-server-7.0-x86_64-dvd.iso ]
   then 
      echo "Ok"
   else
      echo "Downloading"
      iso='http://joey-build.cloud-band.com/iso/rhel-server-7.0-x86_64-dvd.iso'
      wget --progress=bar:force $iso -O /export/rolls/rhel-server-7.0-x86_64-dvd.iso 2>&1 | progressfilt
      echo "Download Complete"
   fi

}

function clean_repo() {

   # Remove the linked in cruft to the repo (which should absolutely be a roll)
   echo -n "Cleaning up repo: "
   cd /export/rocks/contrib/rocks-dist/6.0.2/x86_64/RPMS/
   ls -l | grep \/export\/apps | perl -lane 'system "rm -f @F[8]"'
   echo "Ok"
}

function setup_el7() {

   echo -n "Preparing repo with RHEL 7: "
   # Setup the distro for RHEL7 compute installs.
   rocks disable roll ganglia &> /dev/null
   rocks disable roll alu-fe &> /dev/null
   rocks disable roll puppet &> /dev/null
   rocks disable roll nagios &> /dev/null
   rocks disable roll web-server &> /dev/null
   rocks disable roll openstack-havana-neutron &> /dev/null
   rocks remove roll RHEL &> /dev/null
   rocks disable roll ganglia &> /dev/null
   rocks remove roll ceph-0.80.7-patch &> /dev/null
   cd /export/rolls/
   rocks add roll rhel-server-7.0-x86_64-dvd.iso &> /dev/null
   rocks enable roll RHEL &> /dev/null
   rocks create distro &> /dev/null
   echo "Ok"
}

function pxe_boot_computes() {

   rocks set host boot compute action=install

   for compute in `rocks list host compute | perl -lane 'print $1 if /(compute.*?):/'`
   do
      ip=$(grep $compute /var/cluster/ipmi |awk '{print $2}')
      echo "pxeboot $compute: $ip"
      pxeboot $ip 
   done

   # Sleep for 5 min while we wait..
   sleep 300
}

function pxeboot() {

   /usr/bin/ipmitool -I lanplus -H $1 -U hp -P password chassis bootdev pxe;  sleep 6
   /usr/bin/ipmitool -I lanplus -H $1 -U hp -P password chassis power off; sleep 6
   /usr/bin/ipmitool -I lanplus -H $1 -U hp -P password chassis power on 
}

function fix_grub_and_reboot() {

   rocks set host boot compute action=os
   echo "" > ~/.ssh/known_hosts

   for compute in `rocks list host compute | perl -lane 'print $1 if /(compute.*?):/'`
   do
      while true; do
      ssh -q -p 2200 $compute 'rpm -q foundation-redhat' | grep -q x86_64

         RET=$?
         if [ $RET -eq 0 ]; then
            install_grub $compute
            break
         else 
            sleep 20
         fi
      done
   done 
}

function install_grub() {

   compute=$1

   echo -n "Updating Grub2 config $compute: "

   rpms='/state/partition1/rocks/rolls/RHEL/7.0/redhat/x86_64/RPMS'
   rsync -aP -e 'ssh -p 2200' $rpms/grub2*.rpm $compute:/mnt/sysimage/ &> /dev/null
   rsync -aP -e 'ssh -p 2200' $rpms/os-prober-1.58-5.el7.x86_64.rpm $compute:/mnt/sysimage/ &> /dev/null


   cat <<EOF> /root/grub
GRUB_TIMEOUT=5
GRUB_DISTRIBUTOR="$(sed 's, release .*$,,g' /etc/system-release)"
GRUB_DEFAULT=saved
GRUB_DISABLE_SUBMENU=true
GRUB_TERMINAL_OUTPUT="console"
GRUB_CMDLINE_LINUX="rd.lvm.lv=rhel/root crashkernel=auto  rd.lvm.lv=rhel/swap vconsole.font=latarcyrheb-sun16 vconsole.keymap=us rhgb quiet"
GRUB_DISABLE_RECOVERY="true"
EOF
   scp -q -P 2200 /root/grub $compute:/mnt/sysimage/etc/default/

   # The rpmdb is left in an unusable state, rebuild it from scratch.
   cat <<EOF> /root/update_grub.sh
rm -rf /var/lib/rpm/__db.00*
rpm --rebuilddb
rpm -Uvh /*.rpm && rm -f /*.rpm
/sbin/grub2-install --force /dev/sda
/sbin/grub2-mkconfig -o /boot/grub2/grub.cfg
EOF

   cat <<EOF> /root/device.map
# this device map was generated by joey
(hd0)      /dev/sda
(hd1)      /dev/sdb
EOF

   scp -q -P 2200 /root/device.map $compute:/mnt/sysimage/boot/grub2
   scp -q -P 2200 /root/update_grub.sh $compute:/mnt/sysimage/root/
   ssh -p 2200 $compute 'chroot /mnt/sysimage/ sh /root/update_grub.sh' &> /dev/null
   ssh -p 2200 $compute 'mkdir -p /mnt/sysimage/root/.ssh/' &> /dev/null
   scp -q -P 2200 /root/.ssh/authorized_keys $compute:/mnt/sysimage/root/.ssh/
   ssh -p 2200 $compute 'reboot' &> /dev/null

   echo "Ok"

}

function wait_for_boot() {

   echo -n "Waiting for computes to reboot: "
   while true; do
      rocks run host compute date &> /dev/null
      RET=$?
      if [ $RET -eq 0 ]; then
         echo "Ok"
         break
      fi
      sleep 5
   done
}

function progressfilt() {
    local flag=false c count cr=$'\r' nl=$'\n'
    while IFS='' read -d '' -rn 1 c
    do
        if $flag
        then
            printf '%c' "$c"
        else
            if [[ $c != $cr && $c != $nl ]]
            then
                count=0
            else
                ((count++))
                if ((count > 1))
                then
                    flag=true
                fi
            fi
        fi
    done
}

function sync_juno_and_friends() {

   echo -n "Checking for the Juno roll: "
   # Aquire the RHEL 7 roll.
   if [ -e /export/rolls/juno_bundle.tgz ]
   then
      echo "Ok"
   else
      echo "Downloading"
      tgz='http://joey-build.cloud-band.com/el7/juno_bundle.tgz'
      wget --progress=bar:force $tgz -O /export/rolls/juno_bundle.tgz 2>&1 | progressfilt
      echo "Download Complete"

      cd /export/rolls/
      tar -zxf juno_bundle.tgz
      mv /export/rolls/juno/ /var/www/html/
      chown -R apache:apache /var/www/html/juno/
   fi
}

function create_juno_repo() {

   echo -n "Creating a Juno/RHEL 7 repo: "
   cd /var/www/html/juno/
   createrepo . &> /dev/null

   cat <<EOF> /tmp/mega.repo
[EL7-Juno]
name=Juno Repo
baseurl=http://10.1.1.1/juno/
assumeyes=1
gpgcheck=0
EOF

   rocks list host compute |perl -lane 'system "scp -q /tmp/mega.repo $1:/etc/yum.repos.d/" if /^(.*?):/'

   echo "Ok"
}

function mount_apps_share() {

   echo -n "Mounting NFS share: "
   rocks run host compute 'mkdir -p /share/apps/ && mount 10.1.1.1:/state/partition1/apps/ /share/apps/'
   echo "Ok"
}

function install_python_ceph_puppet() {

   echo "Installing Python, Ceph and Puppet: "
   rocks run host compute command='perl -pi -e "s/gpgcheck=1/gpgcheck=0/" /etc/yum.conf'
   rocks run host compute 'yum -y install python-IPy.noarch python-paramiko.noarch python-crypto python-netifaces netcf-libs ethtool' &> /dev/null
   rocks run host compute 'yum clean all'
   rocks run host compute 'yum -y install ceph puppet' &> /dev/null
   sed -i 's/timeout=30//' /share/apps/ceph/ceph_ng/deploy_osds.py

   echo "Ok"
}

function add_public_storage_ips() {

   echo -n "Setting public and storage IP's: "
   lan=$(ifconfig br1|perl -lane 'print $1 if /addr:(.*?)\s.*?Mask.*?/' |cut -d'.' -f1-3)
   pub=$(rocks list host interface compute-0-0|grep public|awk '{print $2}')

   # This is some badass bash foo right here.
   str=$(dmidecode|grep Product|awk -F: '{print $2}'|head -1| \
         perl -lane 'system qq|grep "@F" /export/apps/common/perl/ALU/common/ACID.pm|'| \
         grep storage|perl -lane 'print $1 if /(eth\d)/')

   count='50'

   for compute in `rocks list host compute | perl -lane 'print $1 if /(compute.*?):/'`
   do
      end=$(host $compute|awk -F. '{print $NF}')
      ssh $compute "ifconfig $pub $lan.$count netmask 255.255.255.0"
      ssh $compute "ifconfig $str 10.2.0.$end netmask 255.255.255.0"
   count=$[count + 1]
   done

   echo "Ok"
}

#reset_ceph
#backup_repo
#get_rhel7
#clean_repo
#setup_el7
#pxe_boot_computes
#fix_grub_and_reboot
#wait_for_boot
#sync_juno_and_friends
#create_juno_repo
#mount_apps_share
#install_python_ceph_puppet
add_public_storage_ips

